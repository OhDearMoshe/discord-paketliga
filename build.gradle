buildscript {
    dependencies {
        classpath("org.postgresql:postgresql:42.7.1")
        classpath("org.flywaydb:flyway-database-postgresql:10.4.1")
    }
}

plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '2.1.0'
    id "org.flywaydb.flyway" version "10.0.0"
    id "com.ncorti.ktfmt.gradle" version "0.21.0"
    id("dev.kordex.gradle.kordex") version "1.6.2"
}

group = 'uk.co.mutuallyassureddistraction'
version = '1.0-SNAPSHOT'

// APP
def koin_version = '3.3.3'
def jdbi_version = '3.37.1'
def kotlin_reflect_version = '1.8.20'
def hawking_version = '0.1.9'
def postgres_kt_version = '0.9.3'

// TEST
def test_container_version = '1.17.6'
def mockk_version = '1.13.16'

dependencies {

    implementation "io.insert-koin:koin-core:$koin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_reflect_version"
    implementation "com.zoho:hawking:$hawking_version"
    implementation "io.github.jan-tennert.supabase:postgrest-kt:$postgres_kt_version"

    // Data Access
    implementation "org.jdbi:jdbi3-core:$jdbi_version"
    implementation "org.jdbi:jdbi3-postgres:$jdbi_version"
    implementation "org.jdbi:jdbi3-kotlin:$jdbi_version"
    implementation "org.jdbi:jdbi3-kotlin-sqlobject:$jdbi_version"
    implementation("org.postgresql:postgresql:42.5.4")
    // Logging, Metrics
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'org.slf4j:slf4j-simple:2.0.9'

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation "org.testcontainers:testcontainers:$test_container_version"
    testImplementation "org.testcontainers:postgresql:$test_container_version"
    testImplementation "io.mockk:mockk:$mockk_version"
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

kotlin {
    jvmToolchain(21)
}

application {
    mainClassName = 'uk.co.mutuallyassureddistraction.paketliga.MainKt'
}

jar {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    // To avoid the duplicate handling strategy error
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // To add all of the dependencies
    from(sourceSets.main.output)

    dependsOn(configurations.runtimeClasspath)
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

ktfmt {
    kotlinLangStyle()
    maxWidth.set(120)
}
